import datetime
import os
import secrets
from io import BytesIO
from zipfile import ZipFile
import os
from flask import Flask, request, render_template, send_file
from imputation import apply_grim, apply_grim_file

# create an instance of the Flask class, with the name of the running application and the paths for the static files and templates
app = Flask(__name__, static_folder='static', template_folder="templates")

# set the upload folder to the absolute path of the "upload_folder" directory
app.config['UPLOAD_FOLDER'] = os.path.abspath("upload_folder")

# set the lifetime of a session to one hour
app.config["PERMANENT_SESSION_LIFETIME"] = datetime.timedelta(hours=1)

# set the secret key to a random string generated by the secrets module
app.config["SECRET_KEY"] = secrets.token_hex()


# create a route for handling file upload and imputation, with the HTTP method POST
@app.route('/impute-file', methods=['POST'])
def impute_file():
    try:
        # get the uploaded file from the request object
        file = request.files.get("genofile", None)   
        
        if file:
            # apply the GRIM algorithm to the file
            genotype_path, haplotype_path = apply_grim_file(file)

            # write the results to a ZIP file and send it as a response
            stream = BytesIO()

            with ZipFile(stream, 'w') as zf:
                zf.write(genotype_path, os.path.basename(genotype_path))
                zf.write(haplotype_path, os.path.basename(haplotype_path))
            stream.seek(0)

            # remove the intermediate files
            os.remove(genotype_path)
            os.remove(haplotype_path)

            return send_file(stream, as_attachment=True, download_name='grimmard_results.zip')

    # render an error template if an exception occurs
    except Exception as e:
        return render_template("error.html", active="", error=str(e))

# create a route for handling form submission and imputation, with the HTTP method POST
@app.route('/impute-form', methods=['POST'])
def impute_form():
    try:
        # get the input data from the form
        race = request.form.get("race", "UNK;")[:-1]
        race_list = race.split(";")
        format = request.form.get("gentic_or_serology", "genetic")
        is_genetic = (format == "genetic")

        # apply the GRIM algorithm to the input data
        genotypes, haplotypes, haplotypes_pairs, glstring, ard_string = apply_grim(request.form, race, is_genetic=is_genetic)

        # render a template with the imputation results
        return render_template("results.html", active="Home", 
                                haplotypes=haplotypes, genotypes=genotypes, races=race_list,
                                ard_string=ard_string, glstring=glstring, imputation_race=race, haplotypes_pairs=haplotypes_pairs)

    # render an error template if an exception occurs
    except Exception as e:
        return render_template("error.html", active="", error=str(e))   

@app.route('/impute', methods=['GET'])
def impute():
    return render_template("index.html", active="Home")

@app.route('/', methods=['GET'])
@app.route('/Home', methods=['GET'])
def home():
    return render_template("index.html", active="Home")

@app.route('/Example', methods=['GET'])
def example():
    return render_template("example.html", active="Example")

@app.route('/Help', methods=['GET'])
def help():
    return render_template("help.html", active="Help")

@app.route('/About', methods=['GET'])
def about():
    return render_template("about.html", active="About")

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=True)
